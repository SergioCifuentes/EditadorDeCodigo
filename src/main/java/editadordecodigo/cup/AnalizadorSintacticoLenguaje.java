
//----------------------------------------------------
// The following code was generated by CUP v0.11a beta 20060608
// Tue Aug 18 22:32:40 CST 2020
//----------------------------------------------------

package editadordecodigo.cup;

import editadordecodigo.cup.semantico.TablaDeSimbolos;
import java_cup.runtime.Symbol;
import editadordecodigo.ui.Principal;

/** CUP v0.11a beta 20060608 generated parser.
  * @version Tue Aug 18 22:32:40 CST 2020
  */
public class AnalizadorSintacticoLenguaje extends java_cup.runtime.lr_parser {

  /** Default constructor. */
  public AnalizadorSintacticoLenguaje() {super();}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoLenguaje(java_cup.runtime.Scanner s) {super(s);}

  /** Constructor which sets the default scanner. */
  public AnalizadorSintacticoLenguaje(java_cup.runtime.Scanner s, java_cup.runtime.SymbolFactory sf) {super(s,sf);}

  /** Production table. */
  protected static final short _production_table[][] = 
    unpackFromStrings(new String[] {
    "\000\065\000\002\002\004\000\002\002\011\000\002\002" +
    "\003\000\002\004\010\000\002\005\007\000\002\005\007" +
    "\000\002\005\007\000\002\005\007\000\002\005\002\000" +
    "\002\003\004\000\002\003\003\000\002\006\003\000\002" +
    "\010\007\000\002\010\007\000\002\010\002\000\002\012" +
    "\003\000\002\013\003\000\002\013\003\000\002\013\003" +
    "\000\002\011\004\000\002\011\005\000\002\011\003\000" +
    "\002\014\006\000\002\014\004\000\002\014\004\000\002" +
    "\014\003\000\002\014\003\000\002\014\005\000\002\007" +
    "\003\000\002\007\003\000\002\007\003\000\002\007\003" +
    "\000\002\007\003\000\002\015\003\000\002\015\003\000" +
    "\002\015\003\000\002\015\002\000\002\016\003\000\002" +
    "\016\003\000\002\017\003\000\002\017\003\000\002\020" +
    "\006\000\002\020\007\000\002\020\002\000\002\021\005" +
    "\000\002\021\003\000\002\022\010\000\002\022\007\000" +
    "\002\023\006\000\002\023\004\000\002\023\002\000\002" +
    "\024\003\000\002\024\003" });

  /** Access to production table. */
  public short[][] production_table() {return _production_table;}

  /** Parse-action table. */
  protected static final short[][] _action_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\016\003\006\004\ufff9\005\004\006\007\007" +
    "\010\010\013\001\002\000\004\036\153\001\002\000\004" +
    "\047\040\001\002\000\004\002\uffff\001\002\000\004\036" +
    "\034\001\002\000\004\036\030\001\002\000\004\004\021" +
    "\001\002\000\004\002\020\001\002\000\004\036\014\001" +
    "\002\000\004\045\015\001\002\000\004\012\016\001\002" +
    "\000\016\004\ufff9\005\004\006\007\007\010\010\013\047" +
    "\ufff9\001\002\000\006\004\ufffa\047\ufffa\001\002\000\004" +
    "\002\001\001\002\000\004\036\022\001\002\000\004\045" +
    "\024\001\002\000\004\012\026\001\002\000\006\012\ufff7" +
    "\045\025\001\002\000\004\012\ufff8\001\002\000\014\005" +
    "\004\006\007\007\010\010\013\047\ufff9\001\002\000\004" +
    "\047\ufffe\001\002\000\004\043\031\001\002\000\004\012" +
    "\032\001\002\000\016\004\ufff9\005\004\006\007\007\010" +
    "\010\013\047\ufff9\001\002\000\006\004\ufffb\047\ufffb\001" +
    "\002\000\004\045\024\001\002\000\004\012\036\001\002" +
    "\000\016\004\ufff9\005\004\006\007\007\010\010\013\047" +
    "\ufff9\001\002\000\006\004\ufffc\047\ufffc\001\002\000\010" +
    "\011\ufff6\032\ufff6\045\ufff6\001\002\000\010\011\ufff3\032" +
    "\042\045\044\001\002\000\004\031\147\001\002\000\004" +
    "\011\112\001\002\000\004\031\045\001\002\000\024\017" +
    "\046\020\052\021\060\022\053\023\051\024\056\025\054" +
    "\027\047\045\057\001\002\000\042\012\uffdd\013\100\014" +
    "\101\015\076\016\uffdd\017\uffdd\020\uffdd\021\uffdd\022\uffdd" +
    "\023\uffdd\024\uffdd\025\uffdd\026\uffdd\027\uffdd\030\uffdd\045" +
    "\uffdd\001\002\000\024\017\uffdb\020\uffdb\021\uffdb\022\uffdb" +
    "\023\uffdb\024\uffdb\025\uffdb\027\uffdb\045\uffdb\001\002\000" +
    "\024\017\046\020\052\021\060\022\053\023\051\024\056" +
    "\025\054\027\047\045\057\001\002\000\034\012\ufff1\016" +
    "\ufff1\017\ufff1\020\ufff1\021\ufff1\022\ufff1\023\ufff1\024\ufff1" +
    "\025\ufff1\026\ufff1\027\ufff1\030\ufff1\045\ufff1\001\002\000" +
    "\042\012\uffdd\013\100\014\101\015\076\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\045\uffdd\001\002\000\034\012\uffef" +
    "\016\uffef\017\uffef\020\uffef\021\uffef\022\uffef\023\uffef\024" +
    "\uffef\025\uffef\026\uffef\027\uffef\030\uffef\045\uffef\001\002" +
    "\000\024\017\uffdc\020\uffdc\021\uffdc\022\uffdc\023\uffdc\024" +
    "\uffdc\025\uffdc\027\uffdc\045\uffdc\001\002\000\034\012\uffe8" +
    "\016\uffe8\017\uffe8\020\uffe8\021\uffe8\022\uffe8\023\uffe8\024" +
    "\uffe8\025\uffe8\026\uffe8\027\uffe8\030\uffe8\045\uffe8\001\002" +
    "\000\032\013\100\014\101\015\076\021\060\022\053\023" +
    "\051\024\uffdd\025\054\026\072\027\047\030\103\045\077" +
    "\001\002\000\034\012\uffe7\016\uffe7\017\uffe7\020\uffe7\021" +
    "\uffe7\022\uffe7\023\uffe7\024\uffe7\025\uffe7\026\uffe7\027\uffe7" +
    "\030\uffe7\045\uffe7\001\002\000\034\012\ufff0\016\ufff0\017" +
    "\ufff0\020\ufff0\021\ufff0\022\ufff0\023\ufff0\024\ufff0\025\ufff0" +
    "\026\ufff0\027\ufff0\030\ufff0\045\ufff0\001\002\000\004\012" +
    "\ufff2\001\002\000\004\012\067\001\002\000\034\012\uffec" +
    "\016\064\017\046\020\052\021\060\022\053\023\051\024" +
    "\056\025\054\026\uffec\027\047\030\uffec\045\057\001\002" +
    "\000\024\017\046\020\052\021\060\022\053\023\051\024" +
    "\056\025\054\027\047\045\057\001\002\000\010\012\uffee" +
    "\026\uffee\030\uffee\001\002\000\010\012\uffed\026\uffed\030" +
    "\uffed\001\002\000\010\011\ufff3\032\042\045\044\001\002" +
    "\000\004\011\ufff5\001\002\000\004\024\uffe2\001\002\000" +
    "\042\012\uffda\013\uffda\014\uffda\015\uffda\016\uffda\017\uffda" +
    "\020\uffda\021\uffda\022\uffda\023\uffda\024\uffda\025\uffda\026" +
    "\uffda\027\uffda\030\uffda\045\uffda\001\002\000\004\024\uffe3" +
    "\001\002\000\004\024\uffe4\001\002\000\004\024\104\001" +
    "\002\000\034\012\uffde\016\uffde\017\uffde\020\uffde\021\uffde" +
    "\022\uffde\023\uffde\024\uffde\025\uffde\026\uffde\027\uffde\030" +
    "\uffde\045\uffde\001\002\000\004\024\uffe5\001\002\000\034" +
    "\012\uffe0\016\uffe0\017\uffe0\020\uffe0\021\uffe0\022\uffe0\023" +
    "\uffe0\024\uffe0\025\uffe0\026\uffe0\027\uffe0\030\uffe0\045\uffe0" +
    "\001\002\000\034\012\uffdf\016\uffdf\017\uffdf\020\uffdf\021" +
    "\uffdf\022\uffdf\023\uffdf\024\uffdf\025\uffdf\026\uffdf\027\uffdf" +
    "\030\uffdf\045\uffdf\001\002\000\004\024\uffe1\001\002\000" +
    "\042\012\uffd9\013\uffd9\014\uffd9\015\uffd9\016\uffd9\017\uffd9" +
    "\020\uffd9\021\uffd9\022\uffd9\023\uffd9\024\uffd9\025\uffd9\026" +
    "\uffd9\027\uffd9\030\uffd9\045\uffd9\001\002\000\034\012\uffe6" +
    "\016\uffe6\017\uffe6\020\uffe6\021\uffe6\022\uffe6\023\uffe6\024" +
    "\uffe6\025\uffe6\026\uffe6\027\uffe6\030\uffe6\045\uffe6\001\002" +
    "\000\034\012\uffe9\016\uffe9\017\uffe9\020\uffe9\021\uffe9\022" +
    "\uffe9\023\uffe9\024\uffe9\025\uffe9\026\uffe9\027\uffe9\030\uffe9" +
    "\045\uffe9\001\002\000\006\026\072\030\103\001\002\000" +
    "\042\012\uffdd\013\100\014\101\015\076\016\uffdd\017\uffdd" +
    "\020\uffdd\021\uffdd\022\uffdd\023\uffdd\024\uffdd\025\uffdd\026" +
    "\uffdd\027\uffdd\030\uffdd\045\uffdd\001\002\000\034\012\uffeb" +
    "\016\uffeb\017\uffeb\020\uffeb\021\uffeb\022\uffeb\023\uffeb\024" +
    "\uffeb\025\uffeb\026\uffeb\027\uffeb\030\uffeb\045\uffeb\001\002" +
    "\000\034\012\uffea\016\uffea\017\uffea\020\uffea\021\uffea\022" +
    "\uffea\023\uffea\024\uffea\025\uffea\026\uffea\027\uffea\030\uffea" +
    "\045\uffea\001\002\000\010\011\uffd6\034\113\035\115\001" +
    "\002\000\004\045\120\001\002\000\004\011\125\001\002" +
    "\000\004\034\116\001\002\000\004\045\120\001\002\000" +
    "\004\012\123\001\002\000\006\012\uffd4\033\121\001\002" +
    "\000\004\045\120\001\002\000\004\012\uffd5\001\002\000" +
    "\010\011\uffd6\034\113\035\115\001\002\000\004\011\uffd7" +
    "\001\002\000\004\045\127\001\002\000\004\002\000\001" +
    "\002\000\004\036\130\001\002\000\004\036\131\001\002" +
    "\000\010\012\uffcf\045\133\050\uffcf\001\002\000\006\012" +
    "\140\050\142\001\002\000\012\012\uffcf\036\135\045\133" +
    "\050\uffcf\001\002\000\006\012\uffd0\050\uffd0\001\002\000" +
    "\004\045\136\001\002\000\010\012\uffcf\045\133\050\uffcf" +
    "\001\002\000\006\012\uffd1\050\uffd1\001\002\000\006\002" +
    "\uffcd\045\uffcd\001\002\000\006\002\uffd2\045\127\001\002" +
    "\000\006\002\uffce\045\uffce\001\002\000\004\002\uffd3\001" +
    "\002\000\004\012\145\001\002\000\010\011\uffd6\034\113" +
    "\035\115\001\002\000\004\011\uffd8\001\002\000\024\017" +
    "\046\020\052\021\060\022\053\023\051\024\056\025\054" +
    "\027\047\045\057\001\002\000\004\012\151\001\002\000" +
    "\010\011\ufff3\032\042\045\044\001\002\000\004\011\ufff4" +
    "\001\002\000\004\044\154\001\002\000\004\012\155\001" +
    "\002\000\016\004\ufff9\005\004\006\007\007\010\010\013" +
    "\047\ufff9\001\002\000\006\004\ufffd\047\ufffd\001\002" });

  /** Access to parse-action table. */
  public short[][] action_table() {return _action_table;}

  /** <code>reduce_goto</code> table. */
  protected static final short[][] _reduce_table = 
    unpackFromStrings(new String[] {
    "\000\154\000\010\002\011\004\004\005\010\001\001\000" +
    "\002\001\001\000\004\006\040\001\001\000\002\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\004\005\016\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\003\022\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\005\026\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\005\032\001\001\000\002\001" +
    "\001\000\004\003\034\001\001\000\002\001\001\000\004" +
    "\005\036\001\001\000\002\001\001\000\002\001\001\000" +
    "\004\010\042\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\014\011\060\012\061\013\054\014" +
    "\062\016\047\001\001\000\004\015\110\001\001\000\002" +
    "\001\001\000\012\011\105\013\054\014\062\016\047\001" +
    "\001\000\002\001\001\000\004\015\104\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\014\007" +
    "\074\013\073\015\072\016\070\017\101\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\012\011\064\013\054\014\062\016\047\001\001" +
    "\000\012\011\065\013\054\014\062\016\047\001\001\000" +
    "\002\001\001\000\002\001\001\000\004\010\067\001\001" +
    "\000\002\001\001\000\002\001\001\000\002\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\002" +
    "\001\001\000\002\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\002\001\001\000\002\001\001" +
    "\000\002\001\001\000\004\017\106\001\001\000\004\015" +
    "\107\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\113\001\001\000\004\021\143\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\021\116\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\021\121\001\001\000" +
    "\002\001\001\000\004\020\123\001\001\000\002\001\001" +
    "\000\004\022\125\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\131\001\001\000\004" +
    "\024\140\001\001\000\004\023\133\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\023\136\001\001\000\002" +
    "\001\001\000\002\001\001\000\004\022\142\001\001\000" +
    "\002\001\001\000\002\001\001\000\002\001\001\000\004" +
    "\020\145\001\001\000\002\001\001\000\014\011\060\012" +
    "\147\013\054\014\062\016\047\001\001\000\002\001\001" +
    "\000\004\010\151\001\001\000\002\001\001\000\002\001" +
    "\001\000\002\001\001\000\004\005\155\001\001\000\002" +
    "\001\001" });

  /** Access to <code>reduce_goto</code> table. */
  public short[][] reduce_table() {return _reduce_table;}

  /** Instance of action encapsulation class. */
  protected CUP$AnalizadorSintacticoLenguaje$actions action_obj;

  /** Action encapsulation object initializer. */
  protected void init_actions()
    {
      action_obj = new CUP$AnalizadorSintacticoLenguaje$actions(this);
    }

  /** Invoke a user supplied parse action. */
  public java_cup.runtime.Symbol do_action(
    int                        act_num,
    java_cup.runtime.lr_parser parser,
    java.util.Stack            stack,
    int                        top)
    throws java.lang.Exception
  {
    /* call code in generated class */
    return action_obj.CUP$AnalizadorSintacticoLenguaje$do_action(act_num, parser, stack, top);
  }

  /** Indicates start state. */
  public int start_state() {return 0;}
  /** Indicates start production. */
  public int start_production() {return 0;}

  /** <code>EOF</code> Symbol index. */
  public int EOF_sym() {return 0;}

  /** <code>error</code> Symbol index. */
  public int error_sym() {return 1;}





    public boolean error;
    public boolean errorRecuperable;
    public TablaDeSimbolos tablaDeSimbolos;
        protected Principal principal;
    public  void setFrame(Principal frame){
        principal =frame;
    }
    public void setTablaDeSimbolos(TablaDeSimbolos tablaDeSimbolos) {
        this.tablaDeSimbolos = tablaDeSimbolos;
    }
     public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("Error Sintactico Recuperado\n");
        System.out.println("\t \tLexema: "+ lexema+"\n");
        System.out.println("\t \tFila: "+ fila+"\n");
        System.out.println("\t \tColumna: "+ columna+"\n");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        try{
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
            System.out.println("Error Sintactico Panic Mode\n");
            System.out.println("\t \tLexema: "+ lexema+"\n");
            System.out.println("\t \tFila: "+ fila+"\n");
            System.out.println("\t \tColumna: "+ columna+"\n");
        } catch (Exception ex) {
         }
    }

}

/** Cup generated class to encapsulate user supplied action code.*/
class CUP$AnalizadorSintacticoLenguaje$actions {


    


  private final AnalizadorSintacticoLenguaje parser;

  /** Constructor */
  CUP$AnalizadorSintacticoLenguaje$actions(AnalizadorSintacticoLenguaje parser) {
    this.parser = parser;
  }

  /** Method with the actual generated action code. */
  public final java_cup.runtime.Symbol CUP$AnalizadorSintacticoLenguaje$do_action(
    int                        CUP$AnalizadorSintacticoLenguaje$act_num,
    java_cup.runtime.lr_parser CUP$AnalizadorSintacticoLenguaje$parser,
    java.util.Stack            CUP$AnalizadorSintacticoLenguaje$stack,
    int                        CUP$AnalizadorSintacticoLenguaje$top)
    throws java.lang.Exception
    {
      /* Symbol object for return from actions */
      java_cup.runtime.Symbol CUP$AnalizadorSintacticoLenguaje$result;

      /* select the action based on the action number */
      switch (CUP$AnalizadorSintacticoLenguaje$act_num)
        {
          /*. . . . . . . . . . . . . . . . . . . .*/
          case 52: // CODIGO ::= puntoYComa 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("CODIGO",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 51: // CODIGO ::= Codigo 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("CODIGO",18, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 50: // PRODS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("PRODS",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 49: // PRODS ::= Cadena PRODS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("PRODS",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 48: // PRODS ::= Cadena dosPuntos Cadena PRODS 
            {
              Object RESULT =null;
		int nombreleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-3)).left;
		int nombreright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-3)).right;
		Object nombre = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-3)).value;
		int idleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-1)).left;
		int idright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-1)).right;
		Object id = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-1)).value;
		int prodleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()).left;
		int prodright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()).right;
		Object prod = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLenguaje$stack.peek()).value;
		
              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("PRODS",17, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 47: // GRAMATICA ::= Cadena dosPuntos dosPuntos PRODS CODIGO 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("GRAMATICA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 46: // GRAMATICA ::= Cadena dosPuntos dosPuntos PRODS CODIGO GRAMATICA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("GRAMATICA",16, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 45: // CADENAS ::= Cadena 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("CADENAS",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 44: // CADENAS ::= Cadena coma CADENAS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("CADENAS",15, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 43: // SIMBOLOS ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 42: // SIMBOLOS ::= no sTerminal CADENAS puntoYComa SIMBOLOS 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 41: // SIMBOLOS ::= sTerminal CADENAS puntoYComa SIMBOLOS 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("SIMBOLOS",14, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 40: // AGRUPACION_C ::= corcheteC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("AGRUPACION_C",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 39: // AGRUPACION_C ::= parentesisC 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("AGRUPACION_C",13, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 38: // AGRUPACION_A ::= corcheteA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("AGRUPACION_A",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 37: // AGRUPACION_A ::= parentesisA 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("AGRUPACION_A",12, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 36: // EX ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("EX",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 35: // EX ::= suma 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("EX",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 34: // EX ::= qMark 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("EX",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 33: // EX ::= asterisco 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("EX",11, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 32: // STR ::= AGRUPACION_C 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("STR",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 31: // STR ::= AGRUPACION_A 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("STR",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 30: // STR ::= EX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("STR",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 29: // STR ::= SALTOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("STR",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 28: // STR ::= Cadena 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("STR",5, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 27: // EXPRESION ::= comillas STR comillas 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 26: // EXPRESION ::= Cadena 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 25: // EXPRESION ::= SALTOS 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 24: // EXPRESION ::= letras EX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 23: // EXPRESION ::= numeros EX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 22: // EXPRESION ::= AGRUPACION_A EXPRESION_OP AGRUPACION_C EX 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION",10, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-3)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 21: // EXPRESION_OP ::= EXPRESION 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION_OP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 20: // EXPRESION_OP ::= EXPRESION op EXPRESION_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION_OP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-2)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 19: // EXPRESION_OP ::= EXPRESION EXPRESION_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESION_OP",7, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 18: // SALTOS ::= tab 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("SALTOS",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 17: // SALTOS ::= saltoDeLinea 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("SALTOS",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 16: // SALTOS ::= blanco 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("SALTOS",9, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 15: // EXP ::= EXPRESION_OP 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("EXP",8, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 14: // EXPRESIONES ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 13: // EXPRESIONES ::= ampersand igual EXP puntoYComa EXPRESIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 12: // EXPRESIONES ::= Cadena igual EXP puntoYComa EXPRESIONES 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("EXPRESIONES",6, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 11: // FUENTE ::= Fuente 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("FUENTE",4, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 10: // CADENA_ESPACIOS ::= Cadena 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("CADENA_ESPACIOS",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 9: // CADENA_ESPACIOS ::= Cadena Cadena 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("CADENA_ESPACIOS",1, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 8: // INFO_NO_OBL ::= 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("INFO_NO_OBL",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 7: // INFO_NO_OBL ::= extension dosPuntos Cadena puntoYComa INFO_NO_OBL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("INFO_NO_OBL",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 6: // INFO_NO_OBL ::= lanzamiento dosPuntos Entero puntoYComa INFO_NO_OBL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("INFO_NO_OBL",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 5: // INFO_NO_OBL ::= autor dosPuntos CADENA_ESPACIOS puntoYComa INFO_NO_OBL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("INFO_NO_OBL",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 4: // INFO_NO_OBL ::= version dosPuntos NumeroVersion puntoYComa INFO_NO_OBL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("INFO_NO_OBL",3, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-4)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 3: // INFO ::= INFO_NO_OBL nombre dosPuntos CADENA_ESPACIOS puntoYComa INFO_NO_OBL 
            {
              Object RESULT =null;

              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("INFO",2, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-5)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 2: // INICIO ::= error 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 1: // INICIO ::= INFO FUENTE EXPRESIONES separador SIMBOLOS separador GRAMATICA 
            {
              Object RESULT =null;
		
              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("INICIO",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-6)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          return CUP$AnalizadorSintacticoLenguaje$result;

          /*. . . . . . . . . . . . . . . . . . . .*/
          case 0: // $START ::= INICIO EOF 
            {
              Object RESULT =null;
		int start_valleft = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-1)).left;
		int start_valright = ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-1)).right;
		Object start_val = (Object)((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-1)).value;
		RESULT = start_val;
              CUP$AnalizadorSintacticoLenguaje$result = parser.getSymbolFactory().newSymbol("$START",0, ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.elementAt(CUP$AnalizadorSintacticoLenguaje$top-1)), ((java_cup.runtime.Symbol)CUP$AnalizadorSintacticoLenguaje$stack.peek()), RESULT);
            }
          /* ACCEPT */
          CUP$AnalizadorSintacticoLenguaje$parser.done_parsing();
          return CUP$AnalizadorSintacticoLenguaje$result;

          /* . . . . . .*/
          default:
            throw new Exception(
               "Invalid action number found in internal parse table");

        }
    }
}


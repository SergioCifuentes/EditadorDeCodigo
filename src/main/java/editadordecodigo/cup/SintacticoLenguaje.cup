
package editadordecodigo.cup;

import java_cup.runtime.Symbol;
    import editadordecodigo.ui.Principal;
import editadordecodigo.lenguaje.tabla.*;
import java.util.ArrayList;
import editadordecodigo.cup.semantico.TablaDeSimbolos;
import editadordecodigo.lenguaje.ConstructorDeLenguaje;
import editadordecodigo.lenguaje.Lenguaje;
import editadordecodigo.lenguaje.afd.*;

 parser code {:
    

    public boolean error;
    public boolean errorRecuperable;
    public TablaDeSimbolos tablaDeSimbolos;
    public ConstructorDeLenguaje cdl;
    protected Principal principal;
    public  void setFrame(Principal frame){
        principal =frame;
    }
    public void setTablaDeSimbolos(TablaDeSimbolos tablaDeSimbolos) {
        this.tablaDeSimbolos = tablaDeSimbolos;
    }
     public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("Error Sintactico Recuperado\n");
        System.out.println("\t \tLexema: "+ lexema+"\n");
        System.out.println("\t \tFila: "+ fila+"\n");
        System.out.println("\t \tColumna: "+ columna+"\n");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        try{
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
            System.out.println("Error Sintactico Panic Mode\n");
            System.out.println("\t \tLexema: "+ lexema+"\n");
            System.out.println("\t \tFila: "+ fila+"\n");
            System.out.println("\t \tColumna: "+ columna+"\n");
        } catch (Exception ex) {
            
         }
    }
:}

action code {:
 private Object[] infoLenguaje = new Object[5];
private ArrayList<EstadoAVL> sim = new ArrayList<>();
private int numeroDeNodo=1;
private String ejemplo;

     protected void mostrarAtributoRepetido(String atributo, Symbol s,AnalizadorSintacticoLenguaje asl) {
        asl.principal.escribirEnErrores("El atributo " + atributo + " se encuentra repetido\n");
        asl.principal.escribirEnErrores("\t \tFila: " + s.right + "\n");
        asl.principal.escribirEnErrores("\t \tColumna: " + s.left + "\n");

    }

:}
init with {:
System.out.println("ssss");
:}


/* Terminals (tokens returned by the scanner). */
terminal nombre, version, autor, lanzamiento, extension, separador, puntoYComa, asterisco, qMark, suma, op, numeros, letras, saltoDeLinea,
 tab, blanco, comillas, parentesisA, parentesisC, corcheteA, corcheteC, igual, ampersand, coma, sTerminal, no, dosPuntos,
llaveA, llaveC;

    
terminal Extension, Id, Entero, NumeroVersion, Cadena, Anything,Fuente,Codigo;

/* Non-terminals */
non terminal INICIO,CADENA_ESPACIOS , INFO, INFO_NO_OBL, FUENTE,STR,STRS,STR2, EXPRESIONES, EXPRESION_OP, 
EXP, SALTOS,EXPRESION, EX, AGRUPACION_A, AGRUPACION_C,SIMBOLOS,CADENAS,GRAMATICA,PRODS,CODIGO;


start with INICIO;

INICIO 		::= INFO:info FUENTE  EXPRESIONES:estados separador SIMBOLOS separador GRAMATICA:gram {: if(info!=null){
                                                                                                 asl.cdl= new ConstructorDeLenguaje((Lenguaje)info,asl.tablaDeSimbolos.getSimbolos(),(ArrayList<Produccion>)gram,(ArrayList<Expresion>)estados,sim);  
                                                                                                    }:}
                                    
                    |error {::} ;
INFO   ::= INFO_NO_OBL nombre dosPuntos CADENA_ESPACIOS:cad puntoYComa INFO_NO_OBL {:if(infoLenguaje[0]==null){
                                                                                if(cad!=null){
                                                                                    infoLenguaje[0]=cad;
                                                                                    Lenguaje lenguaje = new Lenguaje(infoLenguaje);
                                                                                    RESULT=lenguaje;
                                                                                 }
                                                                              }else{
                                                                                mostrarAtributoRepetido("Nombre",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLenguaje$stack.peek()),asl);  
                                                                                }:};
INFO_NO_OBL  ::=  version dosPuntos NumeroVersion:num puntoYComa INFO_NO_OBL {:if(infoLenguaje[1]==null){
                                                                                if(num!=null){
                                                                                    infoLenguaje[1]=num;
                                                                                 }
                                                                              }else{
                                                                                mostrarAtributoRepetido("Version",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLenguaje$stack.peek()),asl);  
                                                                                }:}
                        |autor dosPuntos CADENA_ESPACIOS:cad puntoYComa INFO_NO_OBL {:if(infoLenguaje[2]==null){
                                                                                if(cad!=null){
                                                                                    infoLenguaje[2]=cad;
                                                                                 }
                                                                              }else{
                                                                                mostrarAtributoRepetido("Autor",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLenguaje$stack.peek()),asl);  
                                                                                }:}
			|lanzamiento dosPuntos Entero:num puntoYComa INFO_NO_OBL {:if(infoLenguaje[3]==null){
                                                                                if(num!=null){
                                                                                    infoLenguaje[3]=num;
                                                                                 }
                                                                              }else{
                                                                                mostrarAtributoRepetido("Lanzamiento",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLenguaje$stack.peek()),asl);  
                                                                                }:}
			|extension dosPuntos Cadena:cad puntoYComa INFO_NO_OBL {:if(infoLenguaje[4]==null){
                                                                                if(cad!=null){
                                                                                    infoLenguaje[4]=cad;
                                                                                 }
                                                                              }else{
                                                                                mostrarAtributoRepetido("Extension",((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLenguaje$stack.peek()),asl);  
                                                                                }:}
			|;
CADENA_ESPACIOS ::= Cadena:cad CADENA_ESPACIOS:cads{:String str = (String)cad+" "+(String)cads;
                                                         RESULT=str;:}
                    |Cadena:cad  {:RESULT= cad;:};
FUENTE		::= Fuente;
EXPRESIONES     ::= Cadena:cad igual EXP:ex puntoYComa EXPRESIONES:exAnte {:Expresion exp= new Expresion((EstadoAVL)ex,(String)cad);
                                                                                
                                                                                    ArrayList<Expresion> expresiones= (ArrayList<Expresion>)exAnte;
                                                                                expresiones.add(0,exp);
                                                                                RESULT=expresiones;:}
                        | ampersand igual EXP:ex puntoYComa EXPRESIONES:exAnte {:Expresion exp= new Expresion((EstadoAVL)ex,true);
                                                                                
                                                                                ArrayList<Expresion> expresiones= (ArrayList<Expresion>)exAnte;
                                                                                expresiones.add(0,exp);
                                                                                RESULT=expresiones;:}
			|{:RESULT= new ArrayList<>();:};
EXP             ::= EXPRESION_OP:ex {:RESULT=ex;:};

SALTOS 		::= blanco{:RESULT=" ";:}
			|saltoDeLinea {:RESULT="\n";:}
			|tab {:RESULT="\t";:};
EXPRESION_OP    ::= EXPRESION_OP:estado2 EXPRESION:estado1 {:EstadoAVL estadoNuevo = new EstadoAVL((EstadoAVL)estado2,(EstadoAVL)estado1,new Operacion(Operacion.CONCATENACION));
                                                            RESULT=estadoNuevo;:}
                        | EXPRESION_OP:estado2 op EXPRESION:estado1  {:EstadoAVL estadoNuevo = new EstadoAVL((EstadoAVL)estado2,(EstadoAVL)estado1,new Operacion(Operacion.O));
                                                            RESULT=estadoNuevo;:}
                        |EXPRESION:estado{:RESULT =estado;:};
EXPRESION	::=   parentesisA EXPRESION_OP:estado1 parentesisC EX:ex {:EstadoAVL estado=null;
                                                                            if(ex!=null){
                                                                                estado=new EstadoAVL((EstadoAVL)estado1,new Operacion((Integer)ex));
                                                                                RESULT=estado;
                                                                            }else{
                                                                                RESULT=(EstadoAVL)estado1;
                                                                            }:}
			|numeros EX:ex {:EstadoAVL estado=new EstadoAVL( numeroDeNodo,true,false,null);
                                        sim.add(estado);
                                                                        numeroDeNodo++;

                                                                            if (ex != null) {
                    
                                                                         EstadoAVL estadoOP = new EstadoAVL(estado, new Operacion((Integer) ex));
                                                                          RESULT =estadoOP;
                                                                         }else{
                                                                     RESULT = estado;
                                                                     }:}
			|letras EX:ex {:EstadoAVL estado=new EstadoAVL(numeroDeNodo,false,true,null);
                                        sim.add(estado);
                                                numeroDeNodo++;
                                                                            if (ex != null) {
                    
                                                                            EstadoAVL estadoOP = new EstadoAVL(estado, new Operacion((Integer) ex));
                                                                                RESULT =estadoOP;
                                                                                                }else{
                                                                                         RESULT = estado;
                                                                                         }:}
			|SALTOS:sal  {:EstadoAVL estado=new EstadoAVL(numeroDeNodo,false,false,(String)sal);
                                    
                                    sim.add(estado);
                                        numeroDeNodo++;
                                                                            RESULT=estado;:}
			|Cadena:cad {:EstadoAVL estado=new EstadoAVL(numeroDeNodo,false,false,(String)cad);
                            sim.add(estado);
                                numeroDeNodo++;
                                                                            RESULT=estado;:}
                        |comillas STR:cad comillas EX:ex {:EstadoAVL estado=new EstadoAVL(numeroDeNodo,false,false,(String)cad);
                                                            sim.add(estado);
                                                            numeroDeNodo++;
                                                                            if(ex!=null){
                                                                              estado.setOperacion(new Operacion((Integer)ex));  
                                                                            }
                                                                            RESULT=estado;:}
                        |corcheteA STRS:strs corcheteC  {:ArrayList<String> stantiguos=(ArrayList<String>)strs;
                                                                EstadoAVL estado=new EstadoAVL(numeroDeNodo,false,false,stantiguos.get(0));
                                                                numeroDeNodo++;
                                                                sim.add(estado);
                                                                for(int i =1; i < stantiguos.size(); i++){
                                                                EstadoAVL estado2=new EstadoAVL(numeroDeNodo,false,false,stantiguos.get(i));
                                                                    numeroDeNodo++;
                                                                    sim.add(estado2);
                                                                    estado=new EstadoAVL(estado,estado2,new Operacion(Operacion.O));
                                                                }
                                                                RESULT= estado;
                                                            :};



STRS::= STR2:st STRS:sts{:ArrayList<String> strs= new ArrayList<>();
                        ArrayList<String> stantiguos=(ArrayList<String>)sts;
                        strs.add((String)st);
                        for(int i =0; i < stantiguos.size(); i++){
                        strs.add(stantiguos.get(i));
                        }
                            RESULT=strs;:}
        |STR2:st{:ArrayList<String> strs= new ArrayList<>();
                strs.add((String)st);
                RESULT=strs;:};
STR2             ::= Cadena:cad {:RESULT=cad;:}
                    |SALTOS:sal {:RESULT=sal;:}
                    |asterisco{:RESULT="*";:}
                    |qMark {:RESULT="?";:}
                    |suma{:RESULT="+";:};     
   
STR             ::= Cadena:cad {:RESULT=cad;:}
                    |SALTOS:sal {:RESULT=sal;:}
                    |asterisco{:RESULT="*";:}
                    |qMark {:RESULT="?";:}
                    |suma{:RESULT="+";:}
                    |AGRUPACION_A:ag {:RESULT=ag;:}
                    |AGRUPACION_C:ag {:RESULT=ag;:};
EX 		::= asterisco{:RESULT=Operacion.CERO_O_MAS_VECES;:}
			|qMark {:RESULT=Operacion.VENIR_O_NO;:}
			|suma{:RESULT=Operacion.UNA_O_MAS_VECES;:}
			|;
AGRUPACION_A    ::= parentesisA {:RESULT="(";:}
                    |corcheteA {:RESULT="[";:};
AGRUPACION_C    ::= parentesisC {:RESULT=")";:}
                    |corcheteC {:RESULT="]";:};
SIMBOLOS        ::= sTerminal CADENAS:cads puntoYComa SIMBOLOS{:ArrayList<String> nombres=(ArrayList<String>)cads;
                                                                    for (int i = 0; i < nombres.size(); i++) {
                                                                        if(!asl.tablaDeSimbolos.verificarExistencia(nombres.get(i),TablaDeSimbolos.TIPO_SIMBOLO_TERMINAL)){
                                                                            Simbolo terminal = new Simbolo(nombres.get(i),nombres.get(i),true);
                                                                             asl.tablaDeSimbolos.insertObject(nombres.get(i),TablaDeSimbolos.TIPO_SIMBOLO_TERMINAL,terminal);   
                                                                           }else{
                                                                                mostrarAtributoRepetido("Atributo No Terminal"+nombres.get(i),((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLenguaje$stack.peek()),asl); 
                                                                            }
                                                                    }:}
                    |no sTerminal CADENAS:cads puntoYComa SIMBOLOS{:ArrayList<String> nombres=(ArrayList<String>)cads;
                                                                    for (int i = 0; i < nombres.size(); i++) {
                                                                        if(!asl.tablaDeSimbolos.verificarExistencia(nombres.get(i),TablaDeSimbolos.TIPO_SIMBOLO_NO_TERMINAL)){
                                                                            Simbolo noTerminal = new Simbolo(nombres.get(i),nombres.get(i),false);
                                                                             asl.tablaDeSimbolos.insertObject(nombres.get(i),TablaDeSimbolos.TIPO_SIMBOLO_NO_TERMINAL,noTerminal);   
                                                                           }else{
                                                                                mostrarAtributoRepetido("Atributo No Terminal"+nombres.get(i),((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLenguaje$stack.peek()),asl); 
                                                                            }
                                                                    }:}
                    |;
CADENAS         ::= Cadena:nom coma CADENAS:cads {:ArrayList<String> nombres=(ArrayList<String>)cads;
                                                    ArrayList<String> todos=new ArrayList<String>();
                                                    todos.add((String)nom);
                                                    todos.addAll(nombres);
                                                    RESULT =todos;:}
                 |Cadena:nombre {:ArrayList<String> nombres= new ArrayList<String>();
                                nombres.add((String)nombre);
                                RESULT =nombres;:};
GRAMATICA       ::= Cadena:noterminal dosPuntos dosPuntos PRODS:prod CODIGO:code  GRAMATICA:gram {:ArrayList prodsantiguos= (ArrayList<Produccion>)gram;
                                                                                        if(asl.tablaDeSimbolos.verificarExistenciaConTipo((String)noterminal,TablaDeSimbolos.TIPO_SIMBOLO_NO_TERMINAL)){
                                                                                          
                                                                                          Produccion produccion = new Produccion((Simbolo)asl.tablaDeSimbolos.getValor((String)noterminal),(ArrayList<Simbolo>)prod,(String)code);
                                                                                          ArrayList prods= new ArrayList<Produccion>();
                                                                                          prods.add(produccion);
                                                                                          prods.addAll(prodsantiguos);
                                                                                          RESULT = prods;
                                                                                    }else{
                                                                                    RESULT=prodsantiguos;
                                                                                    //simbolo no es un noterminal o no existe
                                                                                        }:}
                    |Cadena:noterminal dosPuntos dosPuntos PRODS:prod CODIGO:code {:
                                                                                        if(asl.tablaDeSimbolos.verificarExistenciaConTipo((String)noterminal,TablaDeSimbolos.TIPO_SIMBOLO_NO_TERMINAL)){
                                                                                          Produccion produccion = new Produccion((Simbolo)asl.tablaDeSimbolos.getValor((String)noterminal),(ArrayList<Simbolo>)prod,(String)code);
                                                                                          ArrayList prods= new ArrayList<Produccion>();
                                                                                           prods.add(produccion);
                                                                                          RESULT = prods;
                                                                                    }else{
                                                                                    RESULT=new ArrayList<Produccion>();
                                                                                    //simbolo no es un noterminal o no existe
                                                                                        }:};
PRODS           ::= Cadena:nombre dosPuntos Cadena:id PRODS:prod    {:ArrayList<Simbolo> simbolos= new ArrayList<Simbolo>();
                                                                        
                                                                    if(asl.tablaDeSimbolos.verificarExistencia((String)nombre,TablaDeSimbolos.TIPO_SIMBOLO_TERMINAL)){
                                                                        
                                                                       Simbolo nuevo = ((Simbolo)asl.tablaDeSimbolos.getValor((String)nombre));
                                                                       nuevo.setId((String)id);
                                                                       simbolos.add(nuevo);
                                                                        simbolos.addAll((ArrayList<Simbolo>)prod);
                                                                       RESULT= simbolos;
                                                               }else{
                                                                    //ERROR NO EXISTE
                                                                        RESULT =new ArrayList<Simbolo>();
                                                                 }:}
                    |Cadena:nombre PRODS:prod {:
                                                                       ArrayList<Simbolo> simbolos= new ArrayList<Simbolo>();
                                                                    if(asl.tablaDeSimbolos.verificarExistencia((String)nombre,TablaDeSimbolos.TIPO_SIMBOLO_TERMINAL)){
                                                                        Simbolo nuevo = ((Simbolo)asl.tablaDeSimbolos.getValor((String)nombre));
                           
                                                                       simbolos.add(nuevo);
                                                                       simbolos.addAll((ArrayList<Simbolo>)prod);
                                                                       
                                                                       RESULT =simbolos;
                                                               }else{
                                                                        RESULT =new ArrayList<Simbolo>();
                                                                 }:}
                    |{:RESULT =new ArrayList<Simbolo>();:};
CODIGO          ::=Codigo:code{:RESULT=code;:}
                    |puntoYComa{:RESULT=null;:};






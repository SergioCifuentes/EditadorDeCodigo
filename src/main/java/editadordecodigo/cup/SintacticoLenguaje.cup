
package editadordecodigo.cup;

import java_cup.runtime.Symbol;
    import editadordecodigo.ui.Principal;
import editadordecodigo.lenguaje.tabla.*;
import java.util.ArrayList;
import editadordecodigo.cup.semantico.TablaDeSimbolos;

 parser code {:
    

    public boolean error;
    public boolean errorRecuperable;
    public TablaDeSimbolos tablaDeSimbolos;
    protected Principal principal;
    public  void setFrame(Principal frame){
        principal =frame;
    }
    public void setTablaDeSimbolos(TablaDeSimbolos tablaDeSimbolos) {
        this.tablaDeSimbolos = tablaDeSimbolos;
    }
     public void syntax_error(Symbol s){
        String lexema = s.value.toString();
        int fila = s.right;
        int columna = s.left;
        
        System.out.println("Error Sintactico Recuperado\n");
        System.out.println("\t \tLexema: "+ lexema+"\n");
        System.out.println("\t \tFila: "+ fila+"\n");
        System.out.println("\t \tColumna: "+ columna+"\n");
    }

    public void unrecovered_syntax_error(Symbol s) throws java.lang.Exception{
        try{
            String lexema = s.value.toString();
            int fila = s.right;
            int columna = s.left;
            System.out.println("Error Sintactico Panic Mode\n");
            System.out.println("\t \tLexema: "+ lexema+"\n");
            System.out.println("\t \tFila: "+ fila+"\n");
            System.out.println("\t \tColumna: "+ columna+"\n");
        } catch (Exception ex) {
         }
    }
:}

action code {:
private String ejemplo;

     protected void mostrarAtributoRepetido(String atributo, Symbol s,AnalizadorSintacticoLenguaje asl) {

        asl.principal.escribirEnErrores("El atributo " + atributo + " se encuentra repetido\n");

        asl.principal.escribirEnErrores("\t \tFila: " + s.right + "\n");
        asl.principal.escribirEnErrores("\t \tColumna: " + s.left + "\n");

    }

:}
init with {:
System.out.println("ssss");
:}


/* Terminals (tokens returned by the scanner). */
terminal nombre, version, autor, lanzamiento, extension, separador, puntoYComa, asterisco, qMark, suma, op, numeros, letras, saltoDeLinea,
 tab, blanco, comillas, parentesisA, parentesisC, corcheteA, corcheteC, igual, ampersand, coma, sTerminal, no, dosPuntos,
llaveA, llaveC;

    
terminal Extension, Id, Entero, NumeroVersion, Cadena, Anything,Fuente,Codigo;

/* Non-terminals */
non terminal INICIO,CADENA_ESPACIOS , INFO, INFO_NO_OBL, FUENTE,STR, EXPRESIONES, EXPRESION_OP, 
EXP, SALTOS,EXPRESION, EX, AGRUPACION_A, AGRUPACION_C,SIMBOLOS,CADENAS,GRAMATICA,PRODS,CODIGO;


start with INICIO;

INICIO 		::= INFO FUENTE  EXPRESIONES separador SIMBOLOS separador GRAMATICA:gram {:ConstructorDeTabla cdt = new ConstructorDeTabla(asl.tablaDeSimbolos.getSimbolos(),(ArrayList<Produccion>)gram);:}
                    |error {::} ;
INFO   ::= INFO_NO_OBL nombre dosPuntos CADENA_ESPACIOS puntoYComa INFO_NO_OBL ;
INFO_NO_OBL  ::=  version dosPuntos NumeroVersion puntoYComa INFO_NO_OBL
                        |autor dosPuntos CADENA_ESPACIOS puntoYComa INFO_NO_OBL
			|lanzamiento dosPuntos Entero puntoYComa INFO_NO_OBL
			|extension dosPuntos Cadena puntoYComa INFO_NO_OBL
			|;
CADENA_ESPACIOS ::= Cadena Cadena
                    |Cadena;
FUENTE		::= Fuente;
EXPRESIONES     ::= Cadena igual EXP puntoYComa EXPRESIONES
                        | ampersand igual EXP puntoYComa EXPRESIONES
			|;
EXP             ::= EXPRESION_OP;

SALTOS 		::= blanco
			|saltoDeLinea
			|tab;
EXPRESION_OP    ::= EXPRESION EXPRESION_OP
                        | EXPRESION op EXPRESION_OP
                        |EXPRESION;
EXPRESION	::=   AGRUPACION_A EXPRESION_OP AGRUPACION_C EX 
			|numeros EX
			|letras EX
			|SALTOS 
			|Cadena
                        |comillas STR comillas;
STR             ::= Cadena 
                    |SALTOS 
                    |EX
                    |AGRUPACION_A
                    |AGRUPACION_C;
EX 		::= asterisco
			|qMark
			|suma
			|;
AGRUPACION_A    ::= parentesisA
                    |corcheteA;
AGRUPACION_C    ::= parentesisC
                    |corcheteC;
SIMBOLOS        ::= sTerminal CADENAS:cads puntoYComa SIMBOLOS{:ArrayList<String> nombres=(ArrayList<String>)cads;
                                                                    for (int i = 0; i < nombres.size(); i++) {
                                                                        if(!asl.tablaDeSimbolos.verificarExistencia(nombres.get(i),TablaDeSimbolos.TIPO_SIMBOLO_TERMINAL)){
                                                                            Simbolo terminal = new Simbolo(nombres.get(i),nombres.get(i),true);
                                                                             asl.tablaDeSimbolos.insertObject(nombres.get(i),TablaDeSimbolos.TIPO_SIMBOLO_TERMINAL,terminal);   
                                                                           }else{
                                                                                mostrarAtributoRepetido("Atributo No Terminal"+nombres.get(i),((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLenguaje$stack.peek()),asl); 
                                                                            }
                                                                    }:}
                    |no sTerminal CADENAS:cads puntoYComa SIMBOLOS{:ArrayList<String> nombres=(ArrayList<String>)cads;
                                                                    for (int i = 0; i < nombres.size(); i++) {
                                                                        if(!asl.tablaDeSimbolos.verificarExistencia(nombres.get(i),TablaDeSimbolos.TIPO_SIMBOLO_NO_TERMINAL)){
                                                                            Simbolo noTerminal = new Simbolo(nombres.get(i),nombres.get(i),false);
                                                                             asl.tablaDeSimbolos.insertObject(nombres.get(i),TablaDeSimbolos.TIPO_SIMBOLO_NO_TERMINAL,noTerminal);   
                                                                           }else{
                                                                                mostrarAtributoRepetido("Atributo No Terminal"+nombres.get(i),((java_cup.runtime.Symbol) CUP$AnalizadorSintacticoLenguaje$stack.peek()),asl); 
                                                                            }
                                                                    }:}
                    |;
CADENAS         ::= Cadena:nom coma CADENAS:cads {:ArrayList<String> nombres=(ArrayList<String>)cads;
                                                    ArrayList<String> todos=new ArrayList<String>();
                                                    todos.add((String)nom);
                                                    todos.addAll(nombres);
                                                    RESULT =todos;:}
                 |Cadena:nombre {:ArrayList<String> nombres= new ArrayList<String>();
                                nombres.add((String)nombre);
                                RESULT =nombres;:};
GRAMATICA       ::= Cadena:noterminal dosPuntos dosPuntos PRODS:prod CODIGO:code  GRAMATICA:gram {:ArrayList prodsantiguos= (ArrayList<Produccion>)gram;
                                                                                        if(asl.tablaDeSimbolos.verificarExistenciaConTipo((String)noterminal,TablaDeSimbolos.TIPO_SIMBOLO_NO_TERMINAL)){
                                                                                          
                                                                                          Produccion produccion = new Produccion((Simbolo)asl.tablaDeSimbolos.getValor((String)noterminal),(ArrayList<Simbolo>)prod,(String)code);
                                                                                          ArrayList prods= new ArrayList<Produccion>();
                                                                                          prods.add(produccion);
                                                                                          prods.addAll(prodsantiguos);
                                                                                          RESULT = prods;
                                                                                    }else{
                                                                                    RESULT=prodsantiguos;
                                                                                    //simbolo no es un noterminal o no existe
                                                                                        }:}
                    |Cadena:noterminal dosPuntos dosPuntos PRODS:prod CODIGO:code {:
                                                                                        if(asl.tablaDeSimbolos.verificarExistenciaConTipo((String)noterminal,TablaDeSimbolos.TIPO_SIMBOLO_NO_TERMINAL)){
                                                                                          Produccion produccion = new Produccion((Simbolo)asl.tablaDeSimbolos.getValor((String)noterminal),(ArrayList<Simbolo>)prod,(String)code);
                                                                                          ArrayList prods= new ArrayList<Produccion>();
                                                                                           prods.add(produccion);
                                                                                          RESULT = prods;
                                                                                    }else{
                                                                                    RESULT=new ArrayList<Produccion>();
                                                                                    //simbolo no es un noterminal o no existe
                                                                                        }:};
PRODS           ::= Cadena:nombre dosPuntos Cadena:id PRODS:prod    {:ArrayList<Simbolo> simbolos= new ArrayList<Simbolo>();
                                                                        simbolos.addAll((ArrayList<Simbolo>)prod);
                                                                    if(asl.tablaDeSimbolos.verificarExistencia((String)nombre,TablaDeSimbolos.TIPO_SIMBOLO_TERMINAL)){
                                                                        
                                                                       Simbolo nuevo = ((Simbolo)asl.tablaDeSimbolos.getValor((String)nombre));
                                                                       nuevo.setId((String)id);
                                                                       simbolos.add(nuevo);
                                                                       RESULT= simbolos;
                                                               }else{
                                                                    //ERROR NO EXISTE
                                                                        RESULT =new ArrayList<Simbolo>();
                                                                 }:}
                    |Cadena:nombre PRODS:prod {:
                                                                       ArrayList<Simbolo> simbolos= new ArrayList<Simbolo>();
                                                                    if(asl.tablaDeSimbolos.verificarExistencia((String)nombre,TablaDeSimbolos.TIPO_SIMBOLO_TERMINAL)){
                                                                        Simbolo nuevo = ((Simbolo)asl.tablaDeSimbolos.getValor((String)nombre));
                           
                                                                       
                                                                       simbolos.addAll((ArrayList<Simbolo>)prod);
                                                                       simbolos.add(nuevo);
                                                                       RESULT =simbolos;
                                                               }else{
                                                                        RESULT =new ArrayList<Simbolo>();
                                                                 }:}
                    |{:RESULT =new ArrayList<Simbolo>();:};
CODIGO          ::=Codigo:code{:RESULT=code;:}
                    |puntoYComa{:RESULT=null;:};





